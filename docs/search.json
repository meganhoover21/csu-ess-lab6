[
  {
    "objectID": "lab6.html",
    "href": "lab6.html",
    "title": "lab6",
    "section": "",
    "text": "#Load libraries for this lab\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.7     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.2.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nlibrary(powerjoin)\nlibrary(glue)\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(ranger)\nlibrary(xgboost)\n\n\nAttaching package: 'xgboost'\n\nThe following object is masked from 'package:dplyr':\n\n    slice"
  },
  {
    "objectID": "lab6.html#first-lets-make-a-map-of-the-sites.-use-the-borders-ggplot-function-to-add-state-boundaries-to-the-map-and-initially-color-the-points-by-the-mean-flow-q_mean-at-each-site.",
    "href": "lab6.html#first-lets-make-a-map-of-the-sites.-use-the-borders-ggplot-function-to-add-state-boundaries-to-the-map-and-initially-color-the-points-by-the-mean-flow-q_mean-at-each-site.",
    "title": "lab6",
    "section": "first, lets make a map of the sites. Use the borders() ggplot function to add state boundaries to the map and initially color the points by the mean flow (q_mean) at each site.",
    "text": "first, lets make a map of the sites. Use the borders() ggplot function to add state boundaries to the map and initially color the points by the mean flow (q_mean) at each site.\n\nggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"gray50\") +\n  geom_point(aes(color = q_mean)) +\n  scale_color_gradient(low = \"pink\", high = \"dodgerblue\") +\n  ggthemes::theme_map()\n\n\n\n\n\n\n\n\n** scales can be used to map data values to colors (scale_color_) or fill aesthetics (scale_fill_). There are two main types of color scales:\nDiscrete color scales – for things that are categories, like “apples,” “bananas,” and “cherries.” Each gets its own separate color. scale_color_manual(values = c(“red”, “yellow”, “pink”)) #lets you pick your own colors.\nOr\nscale_color_brewer(palette = “Set1”) #uses a built-in color set.\nContinuous color scales – for numbers, like temperature (cold to hot) or height (short to tall). The color changes smoothly. scale_color_gradient(low = “blue”, high = “red”) #makes small numbers blue and big numbers red."
  },
  {
    "objectID": "lab6.html#model-preparation",
    "href": "lab6.html#model-preparation",
    "title": "lab6",
    "section": "Model Preparation",
    "text": "Model Preparation"
  },
  {
    "objectID": "lab6.html#lets-start-by-looking-that-the-3-dimensions-variables-of-this-data.-well-start-with-a-xy-plot-of-aridity-and-rainfall.-we-are-going-to-use-the-scale_color_viridis_c-function-to-color-the-points-by-the-q_mean-column.-this-scale-functions-maps-the-color-of-the-points-to-the-values-in-the-q_mean-column-along-the-viridis-continuous-c-palette.-because-a-scale_color_-function-is-applied-it-maps-to-the-known-color-aesthetic-in-the-plot.",
    "href": "lab6.html#lets-start-by-looking-that-the-3-dimensions-variables-of-this-data.-well-start-with-a-xy-plot-of-aridity-and-rainfall.-we-are-going-to-use-the-scale_color_viridis_c-function-to-color-the-points-by-the-q_mean-column.-this-scale-functions-maps-the-color-of-the-points-to-the-values-in-the-q_mean-column-along-the-viridis-continuous-c-palette.-because-a-scale_color_-function-is-applied-it-maps-to-the-known-color-aesthetic-in-the-plot.",
    "title": "lab6",
    "section": "Lets start by looking that the 3 dimensions (variables) of this data. We’ll start with a XY plot of aridity and rainfall. We are going to use the scale_color_viridis_c() function to color the points by the q_mean column. This scale functions maps the color of the points to the values in the q_mean column along the viridis continuous (c) palette. Because a scale_color_* function is applied, it maps to the known color aesthetic in the plot.",
    "text": "Lets start by looking that the 3 dimensions (variables) of this data. We’ll start with a XY plot of aridity and rainfall. We are going to use the scale_color_viridis_c() function to color the points by the q_mean column. This scale functions maps the color of the points to the values in the q_mean column along the viridis continuous (c) palette. Because a scale_color_* function is applied, it maps to the known color aesthetic in the plot.\n\n# Create a scatter plot of aridity vs rainfall\nggplot(camels, aes(x = aridity, y = p_mean)) +\n  # Add points colored by mean flow\n  geom_point(aes(color = q_mean)) +\n  # Add a linear regression line\n  geom_smooth(method = \"lm\", color = \"red\", linetype = 2) +\n  # Apply the viridis color scale\n  scale_color_viridis_c() +\n  # Add a title, axis labels, and theme (w/ legend on the bottom)\n  theme_linedraw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Aridity vs Rainfall vs Runnoff\", \n       x = \"Aridity\", \n       y = \"Rainfall\",\n       color = \"Mean Flow\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "lab6.html#model-building",
    "href": "lab6.html#model-building",
    "title": "lab6",
    "section": "Model Building",
    "text": "Model Building"
  },
  {
    "objectID": "lab6.html#preprocessor-recipe",
    "href": "lab6.html#preprocessor-recipe",
    "title": "lab6",
    "section": "Preprocessor: recipe",
    "text": "Preprocessor: recipe"
  },
  {
    "objectID": "lab6.html#naive-base-lm-approach",
    "href": "lab6.html#naive-base-lm-approach",
    "title": "lab6",
    "section": "Naive base lm approach",
    "text": "Naive base lm approach"
  },
  {
    "objectID": "lab6.html#where-things-get-a-little-messy",
    "href": "lab6.html#where-things-get-a-little-messy",
    "title": "lab6",
    "section": "Where things get a little messy…",
    "text": "Where things get a little messy…"
  },
  {
    "objectID": "lab6.html#wrong-version-1-augment",
    "href": "lab6.html#wrong-version-1-augment",
    "title": "lab6",
    "section": "Wrong version 1: augment",
    "text": "Wrong version 1: augment"
  },
  {
    "objectID": "lab6.html#wrong-version-2-predict",
    "href": "lab6.html#wrong-version-2-predict",
    "title": "lab6",
    "section": "Wrong version 2: predict",
    "text": "Wrong version 2: predict"
  },
  {
    "objectID": "lab6.html#correct-version-prep---bake---predict",
    "href": "lab6.html#correct-version-prep---bake---predict",
    "title": "lab6",
    "section": "Correct version: prep -> bake -> predict",
    "text": "Correct version: prep -&gt; bake -&gt; predict"
  },
  {
    "objectID": "lab6.html#model-evaluation-statistical-and-visual",
    "href": "lab6.html#model-evaluation-statistical-and-visual",
    "title": "lab6",
    "section": "Model Evaluation: statistical and visual",
    "text": "Model Evaluation: statistical and visual"
  },
  {
    "objectID": "lab6.html#using-a-workflow-instead",
    "href": "lab6.html#using-a-workflow-instead",
    "title": "lab6",
    "section": "Using a workflow instead",
    "text": "Using a workflow instead"
  },
  {
    "objectID": "lab6.html#making-predictions",
    "href": "lab6.html#making-predictions",
    "title": "lab6",
    "section": "Making Predictions",
    "text": "Making Predictions"
  },
  {
    "objectID": "lab6.html#model-evaluation-statistical-and-visual-1",
    "href": "lab6.html#model-evaluation-statistical-and-visual-1",
    "title": "lab6",
    "section": "Model Evaluation: statistical and visual",
    "text": "Model Evaluation: statistical and visual"
  },
  {
    "objectID": "lab6.html#switch-it-up",
    "href": "lab6.html#switch-it-up",
    "title": "lab6",
    "section": "Switch it up!",
    "text": "Switch it up!"
  },
  {
    "objectID": "lab6.html#predictions",
    "href": "lab6.html#predictions",
    "title": "lab6",
    "section": "Predictions",
    "text": "Predictions"
  },
  {
    "objectID": "lab6.html#model-evaluation-statistical-and-visual-2",
    "href": "lab6.html#model-evaluation-statistical-and-visual-2",
    "title": "lab6",
    "section": "Model Evaluation: statistical and visual",
    "text": "Model Evaluation: statistical and visual"
  },
  {
    "objectID": "lab6.html#a-workflowset-approach",
    "href": "lab6.html#a-workflowset-approach",
    "title": "lab6",
    "section": "A workflowset approach",
    "text": "A workflowset approach"
  },
  {
    "objectID": "lab6.html#question-3-your-turn",
    "href": "lab6.html#question-3-your-turn",
    "title": "lab6",
    "section": "Question 3: Your Turn!",
    "text": "Question 3: Your Turn!"
  },
  {
    "objectID": "lab6.html#build-your-own",
    "href": "lab6.html#build-your-own",
    "title": "lab6",
    "section": "Build Your Own",
    "text": "Build Your Own\nBorrowing from the workflow presented above, build your own complete ML pipeline to predict mean stream flow using the CAMELS dataset. You can experiment with different predictors and preprocessing steps to see how they impact model performance. A successful model will have a R-squared value &gt; 0.9. To get started, you can use the following steps as a template:\nQ4a) Data prep/split\n\n#set a seed for reproducibility \nset.seed(321)\n\n#Create an initial split with 75% used for training and 25% for testing\n#note- we did a log transformation on camels recipe in above example for model building\ncamels_split2 &lt;- initial_split(camels, prop = 0.75)\ncamels_train2 &lt;- training(camels_split2)\ncamels_test2  &lt;- testing(camels_split2)\n\n#10-fold cross validation dataset to help us evaluate multi-model setups.\ncamels_cv2 &lt;- vfold_cv(camels_train2, v = 10)\n\nQ4b) Recipe\nI’m using a multiple regression model to show the prediction of the logQmean by aridity, pet_mean because these variables are continuous.\n\n#Define a formula you want to use to predict logQmean & recipe\nrec2 &lt;-  recipe(logQmean ~ aridity + pet_mean, data = camels_train2) %&gt;%\n  # Log transform the predictor variables (aridity and pet_mean)\n  step_log(all_predictors()) %&gt;%\n  # Add an interaction term between aridity and pet_mean\n  step_interact(terms = ~ aridity:pet_mean) |&gt; \n  # Drop any rows with missing values in the pred\n  step_naomit(all_predictors(), all_outcomes())\n\nQ4c): Define 3 models\n\n# Prep,bake predict\n#This ensures the test data is transformed in the same way as the training data before making predictions\nbaked_data2 &lt;- prep(rec2, camels_train2) |&gt; \n  bake(new_data = NULL)\n\n#Define a random forest model using the rand_forest function, set engine to ranger and mode to regression\nrf_model2 &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\", importance = \"impurity\") %&gt;%\n  set_mode(\"regression\")\n\n#Define two other models of choice \n#linear model\nlm_model2 &lt;- linear_reg() %&gt;%\n  # define the engine\n  set_engine(\"lm\") %&gt;%\n  # define the mode\n  set_mode(\"regression\")\n\n#boost model\nboost_model2 &lt;- boost_tree() %&gt;%\n  # define the engine\n  set_engine(\"xgboost\") %&gt;%\n  # define the mode\n  set_mode(\"regression\")\n\n\n\n#rf_wf &lt;- workflow() %&gt;%\n  # Add the recipe\n  #add_recipe(rec) %&gt;%\n  # Add the model\n # add_model(rf_model) %&gt;%\n  # Fit the model\n  #fit(data = camels_train) \n#Set the engine to ranger and the mode to regression\n# Define two other models of your choice\n\nQ4d) workflow set\n\n#Create a workflow object, add recipe, add the model, to model to resamples\nwf2 &lt;- workflow_set(list(rec2), list(lm_model2, boost_model2,rf_model2)) %&gt;%\n  workflow_map('fit_resamples', resamples = camels_cv)\n\nQ4e) Evaluation\n\n# Use autoplot and rank_results to compare the models.\nautoplot(wf2)\n\n\n\n\n\n\n\nrank_results(wf2, rank_metric = \"rsq\", select_best = TRUE)\n\n# A tibble: 6 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  &lt;chr&gt;             &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;\n1 recipe_linear_reg Prepro… rmse    0.567  0.0246    10 recipe       line…     1\n2 recipe_linear_reg Prepro… rsq     0.770  0.0228    10 recipe       line…     1\n3 recipe_rand_fore… Prepro… rmse    0.575  0.0296    10 recipe       rand…     2\n4 recipe_rand_fore… Prepro… rsq     0.759  0.0285    10 recipe       rand…     2\n5 recipe_boost_tree Prepro… rmse    0.611  0.0330    10 recipe       boos…     3\n6 recipe_boost_tree Prepro… rsq     0.733  0.0302    10 recipe       boos…     3\n\n\nThe linear regression model is best out of the three models that were run. This is because the PET_mean and aridity showed more of a linear realationship with the outcome variable of the log Qmean.\nQ5f) Extract and Evaluate\n\n#Build a workflow (not workflow set) with your favorite model, recipe, and training data.Use fit to fit all training data to the model\n\nlm_wf2 &lt;- workflow() %&gt;%\n  # Add the recipe\n  add_recipe(rec2) %&gt;%\n  # Add the model\n  add_model(lm_model2) %&gt;%\n  # Fit the model to the training data\n  fit(data = camels_train2) \n\n#Use augment to make predictions on the test data\nlm_data2 &lt;- augment(lm_wf2, new_data = camels_test2)\ndim(lm_data2)\n\n[1] 168  61\n\n#Create a plot of the observed vs predicted values with clear title, axis labels, and a compelling color scale\nggplot(lm_data2, aes(x = logQmean, y = .pred, colour = pet_mean)) +\n  scale_color_viridis_c() +\n  geom_point() +\n  geom_abline() +\n  theme_linedraw() +\n  labs(title = \"Linear Model: Observed vs Predicted\",\n       x = \"Observed Log Mean Flow\",\n       y = \"Predicted Log Mean Flow\",\n       color = \"PET Mean\")\n\n\n\n\n\n\n\n#metrics\nmetrics(lm_data2, truth = logQmean, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.532\n2 rsq     standard       0.797\n3 mae     standard       0.350"
  }
]